---
interface Props {
  title: string;
  description?: string;
}

const { title, description = 'YouTube Transcript Archive' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  <body class="bg-gray-50 text-gray-900 min-h-screen">
    <header class="bg-white shadow-sm border-b border-gray-200">
      <div class="container mx-auto px-4 py-4">
        <nav class="flex items-center justify-between">
          <a href="/" class="text-2xl font-bold text-primary">
            Scrapyboy
          </a>
          <div id="global-search-container"></div>
        </nav>
      </div>
    </header>

    <main class="container mx-auto px-4 py-8">
      <slot />
    </main>

    <footer class="bg-white border-t border-gray-200 mt-16">
      <div class="container mx-auto px-4 py-6 text-center text-gray-600 text-sm">
        <p>YouTube Transcript Archive powered by Whisper</p>
      </div>
    </footer>
  </body>
</html>

<style is:global>
  * {
    box-sizing: border-box;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  }
</style>

<script is:inline>
  // Global search with Pagefind
  if (typeof window !== 'undefined') {
    window.addEventListener('DOMContentLoaded', async () => {
      const searchContainer = document.getElementById('global-search-container');
      if (!searchContainer) return;

      // Try to load Pagefind (only available after build)
      let pagefind;
      try {
        pagefind = await import('/pagefind/pagefind.js');
      } catch (e) {
        // Pagefind not available in dev mode
        return;
      }

      // Create search UI
      const wrapper = document.createElement('div');
      wrapper.className = 'relative';

      const searchInput = document.createElement('input');
      searchInput.type = 'search';
      searchInput.id = 'global-search';
      searchInput.placeholder = 'Search all transcripts...';
      searchInput.className = 'px-4 py-2 border border-gray-300 rounded-lg w-64 focus:outline-none focus:ring-2 focus:ring-primary';

      const resultsContainer = document.createElement('div');
      resultsContainer.id = 'global-search-results';
      resultsContainer.className = 'absolute top-full mt-2 right-0 w-96 bg-white rounded-lg shadow-xl border border-gray-200 max-h-96 overflow-y-auto hidden z-50';

      wrapper.appendChild(searchInput);
      wrapper.appendChild(resultsContainer);
      searchContainer.appendChild(wrapper);

      let debounceTimer;
      searchInput.addEventListener('input', async (e) => {
        const query = e.target.value.trim();

        clearTimeout(debounceTimer);

        if (!query || query.length < 2) {
          resultsContainer.classList.add('hidden');
          return;
        }

        debounceTimer = setTimeout(async () => {
          try {
            const search = await pagefind.search(query);

            if (search.results.length === 0) {
              resultsContainer.innerHTML = '<div class="p-4 text-gray-600 text-sm">No results found</div>';
              resultsContainer.classList.remove('hidden');
              return;
            }

            resultsContainer.innerHTML = '';

            for (const result of search.results.slice(0, 8)) {
              const data = await result.data();

              const resultItem = document.createElement('a');
              resultItem.href = data.url;
              resultItem.className = 'block p-3 hover:bg-gray-50 border-b border-gray-100 last:border-b-0';
              resultItem.innerHTML = `
                <div class="font-semibold text-sm text-gray-900 mb-1">${data.meta.title || 'Untitled'}</div>
                <div class="text-xs text-gray-600 line-clamp-2">${data.excerpt}</div>
              `;

              resultsContainer.appendChild(resultItem);
            }

            if (search.results.length > 8) {
              const moreResults = document.createElement('div');
              moreResults.className = 'p-3 text-center text-xs text-gray-500 bg-gray-50';
              moreResults.textContent = `+${search.results.length - 8} more results`;
              resultsContainer.appendChild(moreResults);
            }

            resultsContainer.classList.remove('hidden');
          } catch (err) {
            console.error('Search error:', err);
          }
        }, 300);
      });

      // Close results when clicking outside
      document.addEventListener('click', (e) => {
        if (!wrapper.contains(e.target)) {
          resultsContainer.classList.add('hidden');
        }
      });

      // Close on escape
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          resultsContainer.classList.add('hidden');
        }
      });
    });
  }
</script>
